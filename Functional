#Adapter Design Pattern
   Its a structural design pattern. It work as a bridge between two incompatable Interface.
#Real Life Example
   1. Card Reader Which act as an adapter between memory and pc
#When to Use Adapter Design Pattern?
   1. Allows system to use class of another system.
   2. Sometime a library can not be used becaus its interface is incompatible with the interface required by an application
#Alternative
    Faced is the alternative to Adapter design pattern.
#Types
    1.Deligation(Object Adapter)
    2.Inheritance(Class Adapter)
    Deligation(Object Adapter): It represent weak relationship(aggregation). In this process property of adaptee class is called by 
    creating object.
    
    Inheritance(Class Adapter):It represent strong relationship(composition). In this process property of adaptee class is called by 
    implementing adaptee class.
    
# Reference 
    https://www.youtube.com/watch?v=TMFJ1Zy2sDc&index=10&list=PLmCsXDGbJHdjX4WzDCwIT93UZrwTFKP23
    
#Composite  Design Pattern
    Composite design pattern allow you to have tree structure and ask each node to perform same task(means whatever operation you
    can perform on leaf noad should be applicable in parent node).
    This patttern creates tree structure of multiple object.
#When to Use Adapter Design Pattern?
    1. Composite desing pattern is used when we need to treat a group of object in a similar way as single object.
    
#Real Life Example
     Computer Can be devided into two node 1.cabinate 2. peripheral. Cabinate some child node 1.Processor 2. RAM 
     Peripheral containss child node 1. Key board 2. Mouse
     As we know same operation should be applicable in all noad (So if we can find value of individual cost of Processor and RAM the
     we should be able to find commulative cost of peripheral.

#Alternative
       The structure of composite pattern and decorator look the same but they have different intent.
       Composite gives an unified interface to a leaf and composite.
       Decorator decorator gives additional feature to leaf, while giving unified interface.
     Examples
         Composite pattern: classic windows folders and files. Windows folders are composites. files are leaves. 
         A double click on either of them opens the file/folder - double click is unified interface.
         
         Decorator pattern: Buffered io - java.io.FileWriter and java.io.BufferedWriter both extend java.io.Writer.
         java.io.BufferedWriter is composite and FileWriter is leaf. BufferedWriter adds additional responsibility (or feature)
         of buffering to FileWriter. write() method is unified interface, whereas buffering is additional feature.

#Reference
     https://www.youtube.com/watch?v=Q1jZ4TI6MF4

#Proxy Design Pattern
     Proxy provide surrogate or place holder for another object to contorl access to it. Proxy is an object that is being called
     by the client to call the real boject
     In proxy patten a class represent the functionality of another class.
#Real Life Example
     ATM machine work as a proxy on behalf of bank.
     Proxy server
#Types
    1.Remote Proxy(Remote Proxy provide local representative for an object which are reside in different address space.
    Through RMI we can get remote server object to the client server and this act as a remote proxy)
   
   2.Virtual Proxy(It is place holder for object which are expensive to create. expensive object is created only once when frist time
    when client requests for the object )
   
   3.Protection Proxy(It checks the caller have access permission to forward the request.Example: In a developemnt environtment some folder in server pc 
                       shared to CEO or Project Manager but developer can't access those folder)
    4.Smart Proxy
    
#Alternative
    Adapter design pattern is the alternative to the proxy design pattern. but must remember that like adapter design pattern 
    proxy design pattern exposes interface but main advantages of it are - save processing time and memory
    
#Advantages
    -> add sicurity to existing object.
    -> providing interface for remote resources such as web service or REST.
    
# Reference
    https://www.youtube.com/watch?v=ooPPd_LIkzQ&list=PLmCsXDGbJHdhbuiNVstMjyOQdtaS_ha2u&index=8
    
# Flyweight Design Pattern
    Flyweight desing pattern is used in case when we need large number of object of similar nature. Large number of object
    consume large number of memory and flyweight desing patter is used as a solution of it.
    Primarily it is used to reduce number of object creation and secondly it used to increase performance.
    
    There are two state in flyweight design pattern.
       Intrensic: intrensic state are thing that are constant and stored in memory.
       Extrensic: extrensic state are thing that anr not constant and calculated on fly and that is why it is not stord in
       memory.
  #When to use
     when we need 
  #Real life example
      Angry Bird game.
  #Reference Link
      https://www.youtube.com/watch?v=Ht-ieqGMKBk&index=6&list=PLmCsXDGbJHdiS_QqMUDjNmi_pjtZ9qB_6
      
  #Decorator Design Pattern
    Decorator design pattern allows to add new functionality to an object without altering the structure and its
    pattern act as a wrapper to the existing class 
